/* vmedaq.c ---- vme DAQ with V1190                                         */
/*								            */
/*  Version 1.00        2013-09-05      by A. Tamii (For Linux2.6)GE-FANUC  */

#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <unistd.h>
#include <vme/vme.h>
#include <vme/vme_api.h>
#include <sys/socket.h>
#include <sys/signal.h>
#include <netinet/in.h>
#include <arpa/inet.h>
#include <netdb.h>

#include "router.h"
#include "v1190.h"
#include "v977.h"

#define DEBUG 0   /* 1 = debug mode */

int geometrical_address = -1;

#define MAX_DUMP_BUF 0x1000
unsigned long dump_buffer[MAX_DUMP_BUF];

#define V977_MODULE_NUMBER 0
static V977_p v977=(V977_p)NULL;

#define IOREG_CH_DAQ_INHIBIT     0
#define IOREG_CH_ALMOST_FULL     1
#define IOREG_CH_BLOCK_TRANSFER  2


int n_modules = 0;
long long data_size = 0;
int blk_count = 0;
int module_numbers[V1190_MAX_N_MODULES];
int module_counters[32];
V1190_p v1190[V1190_MAX_N_MODULES];

static int v977_init(){
  if(v977_open()){
    fprintf(stderr, "Error in v977_open()\n");
    return -1;
  }
  v977 = v977_map(V977_MODULE_NUMBER);
  if(v977==(V977_p)NULL){
    fprintf(stderr, "Error in v977_map()\n");
    return -1;
  }

  v977->control_register = 0x0002;  
  // default setting is 0x0002
  // 0x0002 = I/O Register, Gate is masked, Output(from front panel input) is not masked
  v977->input_set = 0;
  v977->input_mask = 0;
  v977->output_mask = 0;
  v977->clear_output = 0;
  v977->output_set = 1<<IOREG_CH_DAQ_INHIBIT;
  v977->test_control_register = 0;

  data_size = 0;
  
  return 0;
}

static int v977_exit(){
  if(v977_unmap(V977_MODULE_NUMBER)){
    fprintf(stderr, "Error in v977_unmap()\n");
    return -1;
  }
  if(v977_close()){
    fprintf(stderr, "Error in v977_close()\n");
    return -1;
  }
  return 0;
}

void clear_event_counters(){
  int i;
  fprintf(stderr, "\nClear the V1190A event counters.\n");
  for(i=0; i<n_modules; i++){
    v1190[i]->software_clear = 1;   /* software clear, clear the event counter */
  }
  data_size = 0;
}

static void sighup(){
  clear_event_counters();
}

void show_counter(){
  int i;
  long n;
  fprintf(stderr, "counter:");
  n = v1190[0]->event_counter;
  fprintf(stderr, "%8ld", n);
  for(i=1; i<n_modules; i++){
    fprintf(stderr, "%4ld", v1190[i]->event_counter-n);
  }
  fprintf(stderr, ", size: %6lld MB (%12lld bytes)\n%c%c", data_size/1024/1024, data_size, 27, 'M');
}


long check_data(V1190_p v1190, unsigned long *buffer, int buf_size, int *size){
  V1190_DATA_t   data;
  unsigned long *output_buffer;
  unsigned long ldata;
  long event_count = -1;
  int end_flag = 0;
  
  *size = 0;
  output_buffer = v1190->output_buffer;

  while(!end_flag){
    ldata = *output_buffer;
    data = *(V1190_DATA_t*)&ldata;
    //memcpy(buffer, output_buffer, MAX_BUF_SIZE*sizeof(unsigned long));
    
    switch(data.global_header.id){
    case V1190_HEADER_ID_FILLER:
      end_flag = 1;
      break;
    case V1190_HEADER_ID_GH:
      event_count = data.global_header.event_count;
      module_counters[data.global_header.geo]=event_count;
      if(event_count%1000==0 && data.global_header.geo==0) show_counter();
      // continue to the next line
    default:
      buffer[(*size)++] = ldata;
      if(*size>=buf_size) end_flag = 1;
      break;
    }
  }
  return event_count;
}

int write_to_sd(int sd, unsigned long *buffer, int lsize){
  rtr_inet_info3_t  info3;
  int size;
  int count;
  int reply;
  int n;
  unsigned char *ptr;

  blk_count++;
  size = lsize*sizeof(unsigned long);
#if 0
  fprintf(stderr, "count = %d, size = %d\n", blk_count, size);
#endif
  info3.blk_count = htonl(blk_count);
  info3.blk_size = htonl(size);
  if(write(sd, &info3, sizeof(info3))<0){   /* write info3 */
    perror("write");                       
    return -1;
  }
  if(write(sd, buffer, size)<0){            /* write data via TCP/IP */
    perror("write");  
    return -1;
  }
  
  count = 0;
  ptr = (unsigned char*)&reply;
  while(count<sizeof(int)){
    n = read(sd, ptr, sizeof(reply)-count);
    if(n==0){
      fprintf(stderr, "No reply from the client.\n");
      return -1;
    }
    if(n<0){
      perror("read"); // connection is closed
      return -1;
    }
    count += n;
    ptr = &ptr[n];
  }
  reply = ntohl(reply);
  if(reply!=0){
    fprintf(stderr, "Error reply from the client(%d).\n", reply);
  }
  return size/sizeof(unsigned long);
}

int read_data(int sd, FILE *fd){
  int n_data_modules;
  long event_count;
  int i;
  int val;
#define BUF_SIZE 16384*16
  unsigned long buffer[BUF_SIZE];
  int size;
  int sent_size;
  int written_size;

  n_data_modules = 0;

  for(i=0; i<n_modules; i++){
    event_count = check_data(v1190[i], buffer, BUF_SIZE, &size);
    if(sd){
      if(size>0){
	sent_size = write_to_sd(sd, buffer, size);
	if(sent_size!=size) return -1;
      }
    }else{
      written_size = fwrite(buffer, sizeof(unsigned long), size, fd);
      if(written_size != size){
	perror("write");
	return -1;
      }
      fflush(fd);
    }
    data_size += size*sizeof(unsigned long);

    if(event_count>=0){
      n_data_modules++;
    }
  }
  //fprintf(stderr, "n_data_modules = %d\n", n_data_modules);
  if(n_data_modules==0){
#if 0
    //fprintf(stderr, "idling\n");
    //v977->output_set = 2;
#endif
    val=v977->singlehit_read_clear;
    //fprintf(stderr, "val = %d\n", val);
    if(val&(1<<IOREG_CH_BLOCK_TRANSFER)){
    }
#if 0
    //v977->output_set = 0;
    usleep(1000000);
#endif
  }
  return n_data_modules;
}

int get_socket(){
  struct sockaddr_in name;
  struct servent *serv_p;
  int ld;
  
  /* Create a socket */
  if((ld=socket(AF_INET, SOCK_STREAM, IPPROTO_TCP))<0){
    perror("socket");
    exit(1);
  }
  
  /* Get service port */
  if((serv_p=getservbyname(ROUTER_DAQDATA_SERVICE, "tcp"))==NULL){
    fprintf(stderr, "Cannot find service %s. The default port %d is used.\n",
	    ROUTER_DAQDATA_SERVICE, ROUTER_DAQDATA_PORT);
    name.sin_port = htons(ROUTER_DAQDATA_PORT);
  }else{
    name.sin_port = serv_p->s_port;
  }
  name.sin_family = AF_INET;
  name.sin_addr.s_addr = INADDR_ANY;
  
  /* Bind */
  while(1){
    if(bind(ld, (struct sockaddr*)&name, sizeof(name))<0){
      perror("bind");
      name.sin_port = htons(ntohs(name.sin_port)+1);
      continue;
    }
    break;
  }
  
  /* Listen */
  if(listen(ld, 1)<0){
    close(ld);
    perror("listen");
    exit(1);
  }
  
  fprintf(stderr, "Waiting for connections at port %d.\n", ntohs(name.sin_port));
  return ld;
}

int accept_connection(int ld){
  struct sockaddr addr;
  int addrlen;
  int sd;
  rtr_inet_info1_t  info1;
  rtr_inet_info2_t  info2;
  struct hostent  *hp;
  struct sockaddr_in *in_p;
  int   count, n;
  unsigned char  *ptr;
  char  name[256];
  char  str[256];

  addrlen = sizeof(addr);
  if((sd=accept(ld, &addr, (socklen_t*)&addrlen))<0){
    close(ld);
    perror("accept");
    exit(1);
  }
  /* get client host name */
  in_p = (struct sockaddr_in*)&addr;
  hp = gethostbyaddr((char*)&in_p->sin_addr, sizeof(struct in_addr), AF_INET);
  if(hp!=NULL && *hp->h_aliases!=(char*)NULL)
    strcpy(name, *hp->h_aliases);
  else
    strcpy(name, (char*)(long)inet_ntoa(in_p->sin_addr));
  
  fprintf(stderr, "Connection request from %s\n", name);

  /* read request from client */
  count = 0;
  ptr  = (unsigned char*)&info1;
  while(count<sizeof(info1)){
    if((n=read(sd, ptr, sizeof(info1)-count))<0){  /* wait for the reply */
      perror("read");
      return 0;
    }
    if(n==0){
      fprintf(stderr, "Connection was closed from the client.\n");
      return 0;
    }
    count += n;
    ptr = &ptr[n];
  }
  
  fprintf(stderr, "Client: %s@%s:%s\n", info1.user, name, info1.program);
  
  /* check the version */
  if(ntohl(info1.ver) != ROUTER_INET_VERSION_2){
    info2.result = htonl(E_VERSION);
    write(sd, &info2, sizeof(info2));
    fprintf(stderr, "Client version %d may not be supported.\n", htonl(E_VERSION));
  }
  
  if((ptr=(unsigned char*)strchr(name, '.'))!=(unsigned char*)NULL)   /* get the host name */
    *ptr = 0x00;
  strncpy(str, (char*)info1.user, sizeof(info1.user));
  strcat(str, "@");
  strcat(str, name);
  strcat(str, ":");
  strncat(str, (char*)info1.program, sizeof(info1.program));
  
  info2.result = htonl(E_NOERR);
  info2.blk_size = htonl(0);
  info2.res1 = info2.res2 = 0;
  
  /* send reply */
  if(write(sd, &info2, sizeof(info2))<0){
    perror("write");
    return 0;
  }
  return sd;
}

int main(int argc, char *argv[]){
  FILE *fd = stdout;
  int i;
  int init_flag = 0;
  int net_flag = 0;
  int ld=0;
  int sd=0;
  int n=0;
  long l=0;

  int t_clock = 25;
  //unsigned short match_window_width = 1000/t_clock;     // from 1 to 4095
  unsigned short match_window_width = 4000/t_clock;     // from 1 to 4095
  //short window_offset = -100/t_clock;                   // from -2048 to 40
  short window_offset = -2000/t_clock;                   // from -2048 to 40
  unsigned short extra_search_window_width = 0/t_clock; // no greater than 50
  unsigned short reject_margin = 100/t_clock;           // should be >= 1


  if(argc>1 && !strcmp(argv[1],"-h")){
    fprintf(stdout, "%s ... read v1190 TDC and output to stdout.\n", argv[0]);
    fprintf(stdout, "Usage: %s [-h] [-i] [module_numbers...] file_name \n", argv[0]);
    fprintf(stdout, " -n: (network option) send data to a client via tcp/ip.\n");
    fprintf(stdout, " -h: show this help.\n");
    fprintf(stdout, " -i: initialize V1190 TDCs\n");
    fprintf(stdout, " module_number: the default is 0.\n");
    exit(0);
  }

  argc--;
  argv++;

  while(argc>0){
    if(!strcmp(argv[0],"-i")){
      init_flag = 1;
    }else if(!strcmp(argv[0],"-n")){
      net_flag = 1;
    }else if('0'<=argv[0][0] && argv[0][0]<='9'){
      module_numbers[n_modules] = atoi(argv[0]);
      n_modules++;
    }else{
      fd = fopen(argv[0],"w");
     if(fd==(FILE*)NULL){
        fprintf(stderr, "Could not open file '%s'.\n", argv[0]);
        exit(-1);
      }
      break;
    }
    argc--;
    argv++;
  }

  /* ------------- Open ------------ */

  if(v1190_open()){
    fprintf(stderr, "Error in v1190_open()\n");
    exit(-1);
  }

  if(v977_init()){
    fprintf(stderr, "Error in v1190_init()\n");
    exit(-1);
  }

  for(i=0; i<n_modules; i++){
    v1190[i] = v1190_map(module_numbers[i]);
    if(v1190[i]==(V1190_p)NULL){
      fprintf(stderr, "Error in v1190_map()\n");
      v1190_close();
      exit(-1);
    }
  }


  /* ------------- Initialization ------------ */

  for(i=0; i<n_modules; i++){
    v1190[i]->software_clear = 1;   /* software clear, clear the event counter */

    if(init_flag){
      fprintf(stderr, "Initializing module: %d\n", module_numbers[i]);
      fprintf(stderr, "v1190 = %x\n", (size_t)v1190[i]);
      v1190[i]->output_prog_control = 2; /* select Almost Full for output */
      v1190[i]->almost_full_level = 16384; /* 16384 words = a half of the memory */
      v1190[i]->geo_address_register = module_numbers[i];
      v1190_micro_handshake_write(v1190[i], V1190_OPECODE_TRIG_MATCH);
      usleep(700000);
      
      v1190_micro_handshake_write(v1190[i], V1190_OPECODE_SET_WIN_WIDTH);
      usleep(700000);
      v1190_micro_handshake_write(v1190[i], match_window_width);
      usleep(700000);
      
      v1190_micro_handshake_write(v1190[i], V1190_OPECODE_SET_WIN_OFFS);
      usleep(700000);
      v1190_micro_handshake_write(v1190[i], window_offset);
      usleep(700000);
      
      v1190_micro_handshake_write(v1190[i], V1190_OPECODE_SET_SW_MARGIN);
      usleep(700000);
      v1190_micro_handshake_write(v1190[i], extra_search_window_width);
      usleep(700000);
      
      v1190_micro_handshake_write(v1190[i], V1190_OPECODE_SET_REJ_MARGIN);
      usleep(700000);
      v1190_micro_handshake_write(v1190[i], reject_margin);
      usleep(700000);
      fprintf(stderr, "done\n");
    }
  }

  if(init_flag)
    exit(0);


  if(net_flag){
    fprintf(stderr, "Creating a socket.\n");
    ld = get_socket();
  }

  signal(SIGPIPE, SIG_IGN);   /* ignore the signal SIGPIPE */
  signal(SIGHUP, sighup);   /* ignore the signal SIGPIPE */

  /* ------------- Start DAQ  ------------ */
  fprintf(stderr, "DAQ started.\n");
  if(net_flag){
    while(1){
      if(sd==0){
	sd = accept_connection(ld);
	clear_event_counters();
	v977->output_set = 0;
      }
      n=read_data(sd, fd);
      if(n>0) continue;
      else if(n==0){ // idling
	if(write_to_sd(sd, &l, 0)>=0){ // send keep alive packet
	  show_counter();
	  usleep(10000);
	  continue;
	}
      }
      // connection loss
      v977->output_set = 1<<IOREG_CH_DAQ_INHIBIT;
      fprintf(stderr, "Close connection to the client.\n");
      close(sd);
      sd = 0;
    }
  }else{
    v977->output_set = 0;
    while(1){
      if(read_data(sd, fd)<0){
	break;
      }
    }
    v977->output_set = 1<<IOREG_CH_DAQ_INHIBIT;
  }

  /* ------------- Close ------------ */
  for(i=0; i<n_modules; i++){
    if(v1190_unmap(module_numbers[i])){
      fprintf(stderr, "Error in v1190_unmap()\n");
    }
  }

  if(v977_exit()){
    fprintf(stderr, "Error in v1190_exit()\n");
  }

  if(v1190_close()){
    fprintf(stderr, "Error in v1190_close()\n");
  }

  return 0; 
}

